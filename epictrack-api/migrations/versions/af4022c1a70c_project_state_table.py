"""project state table

Revision ID: af4022c1a70c
Revises: b7a3fafa6f1b
Create Date: 2024-10-28 16:27:25.026807

"""

from alembic import op
from sqlalchemy.dialects.postgresql import ARRAY
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "af4022c1a70c"
down_revision = "b7a3fafa6f1b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_states",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "component",
            ARRAY(
                sa.Enum(
                    "COMPLIANCE", "TRACK", "SUBMIT", name="projectstatecomponentenum"
                )
            ),
            nullable=False,
        ),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.Column("created_by", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("updated_by", sa.String(length=255), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="f", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "project_states_history",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(), autoincrement=False, nullable=False),
        sa.Column(
            "component",
            ARRAY(
                sa.Enum(
                    "COMPLIANCE", "TRACK", "SUBMIT", name="projectstatecomponentenum"
                )
            ),
            nullable=False,
        ),
        sa.Column("sort_order", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column(
            "created_by", sa.String(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_by", sa.String(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("is_deleted", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("pk", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("during", postgresql.TSTZRANGE(), nullable=True),
        sa.PrimaryKeyConstraint("id", "pk"),
        sqlite_autoincrement=True,
    )
    with op.batch_alter_table("projects", schema=None) as batch_op:
        batch_op.add_column(sa.Column("project_state_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            "projects_project_state_id_project_state_fk",
            "project_states",
            ["project_state_id"],
            ["id"],
        )

    with op.batch_alter_table("projects_history", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "project_state_id", sa.Integer(), autoincrement=False, nullable=True
            )
        )
        batch_op.create_foreign_key(
            "projects_project_state_id_project_state_fk",
            "project_states",
            ["project_state_id"],
            ["id"],
        )
    project_states = [
        {"name": "Potential Work", "component": ["SUBMIT"]},
        {"name": "Pre Work", "component": ["TRACK", "SUBMIT"]},
        {"name": "Under Work", "component": ["TRACK", "SUBMIT"]},
        {"name": "Work Pending", "component": ["TRACK", "SUBMIT"]},
        {"name": "Under Dispute Resolution", "component": ["TRACK", "SUBMIT"]},
        {"name": "Other Work", "component": ["TRACK"]},
        {"name": "Project Withdrawn", "component": ["TRACK"]},
        {"name": "Project Terminated", "component": ["TRACK"]},
        {"name": "EAC Expired", "component": ["TRACK"]},
        {"name": "EAC Or Order Cancelled", "component": ["TRACK"]},
        {"name": "EAC Or Order Suspended", "component": ["TRACK"]},
        {"name": "Indeterminate", "component": ["COMPLIANCE"]},
        {"name": "Preconstruction", "component": ["COMPLIANCE"]},
        {"name": "Construction", "component": ["COMPLIANCE"]},
        {"name": "Operation", "component": ["COMPLIANCE"]},
        {"name": "Care and Maintenance", "component": ["COMPLIANCE"]},
        {"name": "Decommissioning", "component": ["COMPLIANCE"]},
        {"name": "Closed", "component": ["TRACK"]},
    ]

    for idx, state in enumerate(project_states, start=1):
        name = state['name']
        component = state['component']
        component_array = "{" + ", ".join(component) + "}"  # Proper format for PostgreSQL array
        op.execute(
            f"""
            INSERT INTO project_states (name, component, sort_order, created_by, created_at, updated_by, updated_at, is_active, is_deleted)
            VALUES ('{name}', '{component_array}', {idx}, 'system', NOW(), 'system', NOW(), TRUE, FALSE)
            """
        )
    op.execute("ALTER TYPE projectstateenum ADD VALUE IF NOT EXISTS 'PRE_WORK'")
    state_map = {
        "PRE_WORK": 2,
        "UNDER_EAC_ASSESSMENT": 3,
        "UNDER_EXEMPTION_REQUEST": 3,
        "UNDER_AMENDMENT": 3,
        "UNDER_DISPUTE_RESOLUTION": 5,
        "PRE_CONSTRUCTION": 13,
        "CONSTRUCTION": 14,
        "OPERATION": 15,
        "CARE_AND_MAINTENANCE": 16,
        "DECOMMISSION": 17,
        "UNKNOWN": 13,
        "CLOSED": 18,
        "UNDER_DESIGNATION": 3
    }
    for state, state_id in state_map.items():
        op.execute(f"UPDATE projects SET project_state_id={state_id} WHERE project_state='{state}'")
    op.execute("ALTER TABLE projects DROP COLUMN project_state")
    param = '{"project_state_id": 13}'
    op.execute(f"update action_configurations set additional_params = '{param}' where  action_id = 13")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("projects_history", schema=None) as batch_op:
        batch_op.drop_constraint(
            "projects_project_state_id_project_state_fk", type_="foreignkey"
        )
        batch_op.drop_column("project_state_id")

    with op.batch_alter_table("projects", schema=None) as batch_op:
        batch_op.drop_constraint(
            "projects_project_state_id_project_state_fk", type_="foreignkey"
        )
        batch_op.drop_column("project_state_id")

    op.drop_table("project_states_history")
    op.drop_table("project_states")
    op.execute("DROP TYPE IF EXISTS projectstatecomponentenum")
    op.execute("alter table projects add column project_state projectstateenum")
    # ### end Alembic commands ###
